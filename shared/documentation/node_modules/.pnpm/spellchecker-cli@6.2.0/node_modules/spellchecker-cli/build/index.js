#!/usr/bin/env node
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import fs from 'fs-extra';
import glob from 'globby';
import reporter from 'vfile-reporter';
import { buildPersonalDictionary } from './lib/build-personal-dictionary.js';
import { parseConfig } from './lib/config/index.js';
import { hasMessages } from './lib/has-messages.js';
import { printError } from './lib/print-error.js';
import { generateReports } from './lib/report-generator.js';
import { Spellchecker } from './lib/spellchecker.js';
import { toDictionary } from './lib/to-dictionary.js';
(function () { return __awaiter(void 0, void 0, void 0, function () {
    var _a, files, language, personalDictionaryPaths, generateDictionaryPath, noGitignore, ignoreRegexes, suggestions, plugins, reports, quiet, personalDictionary, spellchecker, filesFromGlobs, checkSpelling, vfiles, results, path;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _a = parseConfig(), files = _a.files, language = _a.language, personalDictionaryPaths = _a.personalDictionaryPaths, generateDictionaryPath = _a.generateDictionaryPath, noGitignore = _a.noGitignore, ignoreRegexes = _a.ignoreRegexes, suggestions = _a.suggestions, plugins = _a.plugins, reports = _a.reports, quiet = _a.quiet;
                return [4 /*yield*/, buildPersonalDictionary(personalDictionaryPaths)];
            case 1:
                personalDictionary = _b.sent();
                spellchecker = new Spellchecker({
                    language: language,
                    personalDictionary: personalDictionary,
                    ignoreRegexes: ignoreRegexes,
                    suggestions: suggestions,
                    plugins: plugins,
                });
                if (personalDictionaryPaths.length > 0) {
                    files.push.apply(files, personalDictionaryPaths.map(function (filePath) { return "!".concat(filePath); }));
                }
                return [4 /*yield*/, glob(files, { gitignore: !noGitignore })];
            case 2:
                filesFromGlobs = _b.sent();
                if (!quiet) {
                    console.log("Spellchecking ".concat(filesFromGlobs.length, " file").concat(filesFromGlobs.length === 1 ? '' : 's', "..."));
                }
                checkSpelling = function (filePath) {
                    return spellchecker.checkSpelling(filePath);
                };
                return [4 /*yield*/, Promise.all(filesFromGlobs.map(checkSpelling))];
            case 3:
                vfiles = _b.sent();
                results = reporter(vfiles, { quiet: quiet });
                if (results.length > 0) {
                    if (!quiet) {
                        console.log();
                    }
                    console.log(results);
                }
                if (reports.length > 0) {
                    generateReports(reports, vfiles);
                }
                if (!hasMessages(vfiles)) return [3 /*break*/, 6];
                if (!(generateDictionaryPath !== undefined &&
                    hasMessages(vfiles, function (message) { return message.source === 'retext-spell'; }))) return [3 /*break*/, 5];
                path = generateDictionaryPath || 'dictionary.txt';
                return [4 /*yield*/, fs.writeFile(path, toDictionary(vfiles))];
            case 4:
                _b.sent();
                console.log("Personal dictionary written to ".concat(path, "."));
                _b.label = 5;
            case 5:
                process.exit(1);
                _b.label = 6;
            case 6: return [2 /*return*/];
        }
    });
}); })().catch(function (error) {
    printError(error);
    process.exit(1);
});
