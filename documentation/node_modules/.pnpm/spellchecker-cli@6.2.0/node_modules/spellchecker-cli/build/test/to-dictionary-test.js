import chai from 'chai';
import { toDictionary } from '../lib/to-dictionary.js';
import { buildVfile, fileWithNoMessages } from './helpers/vfile.js';
chai.should();
var addNewlines = function (strings) {
    return strings.map(function (s) { return "".concat(s, "\n"); }).join('');
};
describe('toDictionary', function () {
    it('returns an empty string when passed an empty array', function () {
        toDictionary([]).should.equal('');
    });
    it('returns an empty string when passed a list of vfiles with no messages', function () {
        toDictionary([
            fileWithNoMessages,
            fileWithNoMessages,
            fileWithNoMessages,
        ]).should.equal('');
    });
    it('returns a sorted list of messages', function () {
        toDictionary([
            buildVfile(['c', 'e']),
            buildVfile(['b']),
            buildVfile(['a', 'd']),
        ]).should.equal(addNewlines(['a', 'b', 'c', 'd', 'e']));
    });
    it('returns a deduplicated list of messages', function () {
        toDictionary([
            buildVfile(['a', 'b']),
            buildVfile(['b', 'c']),
            buildVfile(['c', 'a']),
        ]).should.equal(addNewlines(['a', 'b', 'c']));
    });
    it('only includes messages from retext-spell', function () {
        toDictionary([
            buildVfile(['a', 'b']),
            {
                messages: [
                    { source: 'asdf', actual: 'c' },
                    { source: 'asdf', actual: 'd' },
                    { source: 'retext-spell', actual: 'e' },
                ],
            },
        ]).should.equal(addNewlines(['a', 'b', 'e']));
    });
    it('ignores overflow messages from retext-spell', function () {
        toDictionary([
            {
                messages: [
                    { source: 'retext-spell', ruleId: 'retext-spell', actual: 'a' },
                    { source: 'retext-spell', ruleId: 'overflow', actual: 'b' },
                ],
            },
        ]).should.equal('a\n');
    });
});
