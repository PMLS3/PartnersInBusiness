import assign from 'lodash/assign.js';
import difference from 'lodash/difference.js';
import { printError } from '../print-error.js';
import { defaultPlugins, getUsage, readArgs, supportedLanguages, supportedPlugins, } from './command-line.js';
import { readConfigFile } from './file.js';
var defaultValues = {
    language: 'en-US',
    dictionaries: [],
    noGitignore: false,
    ignore: [],
    plugins: defaultPlugins,
    frontmatterKeys: [],
    reports: [],
};
export var parseConfig = function () {
    var args = readArgs();
    var configFile = readConfigFile(args.config);
    var parsedArgs = assign({}, defaultValues, configFile, args);
    var files = parsedArgs.files, language = parsedArgs.language, plugins = parsedArgs.plugins, personalDictionaryPaths = parsedArgs.dictionaries, ignoreRegexStrings = parsedArgs.ignore, quiet = parsedArgs.quiet, reports = parsedArgs.reports, help = parsedArgs.help, generateDictionary = parsedArgs.generateDictionary, noGitignore = parsedArgs.noGitignore, noSuggestions = parsedArgs.noSuggestions, frontmatterKeys = parsedArgs.frontmatterKeys;
    var usage = getUsage();
    if (help) {
        console.log(usage);
        process.exit(0);
    }
    if (!files || files.length === 0) {
        printError('A list of files is required.');
        console.log(usage);
        process.exit(1);
    }
    if (!supportedLanguages.includes(language)) {
        printError("The language \"".concat(language, "\" is not supported."));
        console.log(usage);
        process.exit(1);
    }
    var unsupportedPlugins = difference(plugins, supportedPlugins);
    if (unsupportedPlugins.length > 0) {
        printError("The following retext plugins are not supported: ".concat(unsupportedPlugins.join(', '), "."));
        console.log(usage);
        process.exit(1);
    }
    var updatedPlugins = plugins;
    var frontmatterPluginIndex = plugins.indexOf('frontmatter');
    if (frontmatterPluginIndex === -1 && frontmatterKeys.length > 0) {
        printError('The `--frontmatter-keys` option is invalid unless the `frontmatter` plugin is used.');
        console.log(usage);
        process.exit(1);
    }
    else if (frontmatterPluginIndex !== -1) {
        updatedPlugins[frontmatterPluginIndex] = { frontmatter: frontmatterKeys };
    }
    var ignoreRegexes = ignoreRegexStrings.map(function (regexString) { return new RegExp("^".concat(regexString, "$")); });
    return {
        files: files,
        language: language,
        personalDictionaryPaths: personalDictionaryPaths,
        generateDictionaryPath: generateDictionary,
        noGitignore: noGitignore,
        ignoreRegexes: ignoreRegexes,
        suggestions: !noSuggestions,
        plugins: updatedPlugins,
        reports: reports,
        quiet: !!quiet,
    };
};
