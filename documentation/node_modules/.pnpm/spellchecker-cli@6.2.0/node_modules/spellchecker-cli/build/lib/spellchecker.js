var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import dictionaryEn from 'dictionary-en';
import dictionaryEnAu from 'dictionary-en-au';
import dictionaryEnCa from 'dictionary-en-ca';
import dictionaryEnGb from 'dictionary-en-gb';
import dictionaryEnZa from 'dictionary-en-za';
import dictionaryVi from 'dictionary-vi';
import fs from 'fs-extra';
import assign from 'lodash/assign.js';
import every from 'lodash/every.js';
import { remark } from 'remark';
import frontmatter from 'remark-frontmatter';
import remarkRetext from 'remark-retext';
import { retext } from 'retext';
import emoji from 'retext-emoji';
import indefiniteArticle from 'retext-indefinite-article';
import repeatedWords from 'retext-repeated-words';
import spell from 'retext-spell';
import syntaxMentions from 'retext-syntax-mentions';
import syntaxUrls from 'retext-syntax-urls';
import vfile from 'vfile';
import { frontmatterFilter } from './frontmatter-filter.js';
import { isMarkdownFile } from './is-markdown-file.js';
function buildSpellchecker(_a) {
    var dictionary = _a.dictionary, suggestions = _a.suggestions, plugins = _a.plugins;
    var spellchecker = retext().use(emoji);
    if (plugins.includes('indefinite-article')) {
        spellchecker.use(indefiniteArticle);
    }
    if (plugins.includes('repeated-words')) {
        spellchecker.use(repeatedWords);
    }
    if (plugins.includes('syntax-mentions')) {
        spellchecker.use(syntaxMentions);
    }
    if (plugins.includes('syntax-urls')) {
        spellchecker.use(syntaxUrls);
    }
    if (plugins.includes('spell')) {
        spellchecker.use(spell, {
            dictionary: dictionary,
            max: suggestions ? Infinity : -1,
        });
    }
    return spellchecker;
}
function buildMarkdownSpellchecker(_a) {
    var plugins = _a.plugins, spellchecker = _a.spellchecker;
    var markdownSpellchecker = remark();
    var frontmatterOptions = plugins.filter(function (plugin) { return typeof plugin !== 'string'; });
    if (frontmatterOptions.length > 0) {
        markdownSpellchecker
            .use(frontmatter, ['yaml', 'toml'])
            .use(frontmatterFilter, frontmatterOptions[0].frontmatter);
    }
    return markdownSpellchecker.use(remarkRetext, spellchecker);
}
function getDictionary(language) {
    switch (language) {
        case 'en-AU':
            return dictionaryEnAu;
        case 'en-CA':
            return dictionaryEnCa;
        case 'en-GB':
            return dictionaryEnGb;
        case 'en-US':
            return dictionaryEn;
        case 'en-ZA':
            return dictionaryEnZa;
        case 'vi':
            return dictionaryVi;
        default:
            throw new Error("Unknown language ".concat(language));
    }
}
var Spellchecker = /** @class */ (function () {
    function Spellchecker(_a) {
        var language = _a.language, personalDictionary = _a.personalDictionary, ignoreRegexes = _a.ignoreRegexes, suggestions = _a.suggestions, plugins = _a.plugins;
        var dictionary = getDictionary(language);
        this.spellchecker = buildSpellchecker({ dictionary: dictionary, suggestions: suggestions, plugins: plugins });
        this.markdownSpellchecker = buildMarkdownSpellchecker({
            plugins: plugins,
            spellchecker: this.spellchecker,
        });
        this.ignoreRegexes = ignoreRegexes;
        this.personalDictionary = personalDictionary;
    }
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    Spellchecker.prototype.checkSpelling = function (filePath) {
        return __awaiter(this, void 0, void 0, function () {
            var spellcheckerForFileType, excludeBlockRe, contents, contentsWithoutExcludes, contentsWithoutVariationSelectors, file, result;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        spellcheckerForFileType = isMarkdownFile(filePath)
                            ? this.markdownSpellchecker
                            : this.spellchecker;
                        excludeBlockRe = /(<!--\s*spellchecker-disable\s*-->([\S\s]*?)<!--\s*spellchecker-enable\s*-->)/gi;
                        return [4 /*yield*/, fs.readFile(filePath)];
                    case 1:
                        contents = (_a.sent()).toString();
                        contentsWithoutExcludes = contents.replace(excludeBlockRe, '');
                        contentsWithoutVariationSelectors = contentsWithoutExcludes.replace(/[\uFE0E\uFE0F]/g, '');
                        file = vfile({
                            contents: contentsWithoutVariationSelectors,
                            path: filePath,
                        });
                        return [4 /*yield*/, spellcheckerForFileType.process(file)];
                    case 2:
                        result = _a.sent();
                        return [2 /*return*/, assign({}, result, {
                                messages: result.messages.filter(function (_a) {
                                    var actual = _a.actual;
                                    var doesNotMatch = function (regex) { return !regex.test(actual); };
                                    return (every(_this.ignoreRegexes, doesNotMatch) &&
                                        every(_this.personalDictionary, doesNotMatch));
                                }),
                            })];
                }
            });
        });
    };
    return Spellchecker;
}());
export { Spellchecker };
