# User Mutations
mutation CreateUser(
  $uid: UUID!
  $email: String!
  $username: String!
  $displayName: String
  $photoURL: String
  $defaultWorkspace: UUID
  $appIds: [String!]!
) @auth(level: PUBLIC) {
  user_insert(data: {
    uid: $uid
    email: $email
    username: $username
    displayName: $displayName
    photoURL: $photoURL
    defaultWorkspace: $defaultWorkspace
    appIds: $appIds
  })
}

mutation UpdateUser(
  $key: User_Key!,
  $email: String,
  $username: String,
  $displayName: String,
  $photoURL: String,
  $defaultWorkspace: UUID,
  $appIds: [String!]
) @auth(level: USER) {
  user_update(
    key: $key,
    data: {
      email: $email
      username: $username
      displayName: $displayName
      photoURL: $photoURL
      defaultWorkspace: $defaultWorkspace
      appIds: $appIds
    }
  )
}

mutation AddAppToUser(
  $key: User_Key!, 
  $appIds: [String!]!
) @auth(level: USER) {
  user_update(
    key: $key,
    data: { 
      appIds: $appIds
    }
  )
}

# UserWorkspace Mutations
mutation CreateUserWorkspace(
  $userId: UUID!,
  $workspaceId: UUID!,
  $appId: String!,
  $role: String!,
  $profileId: UUID
) @auth(level: USER) {
  userWorkspace_insert(data: {
    userId: $userId
    workspaceId: $workspaceId
    appId: $appId
    role: $role
    profileId: $profileId
  })
}

mutation UpdateUserWorkspaceRole(
  $key: UserWorkspace_Key!,
  $role: String!
) @auth(level: USER) {
  userWorkspace_update(
    key: $key,
    data: { role: $role }
  )
}

mutation UpdateUserWorkspaceProfile(
  $key: UserWorkspace_Key!,
  $profileId: UUID!
) @auth(level: USER) {
  userWorkspace_update(
    key: $key,
    data: { profileId: $profileId }
  )
}

mutation RemoveUserFromWorkspace(
  $key: UserWorkspace_Key!
) @auth(level: USER) {
  userWorkspace_delete(key: $key)
}